import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class PerformanceUtility {

    private ConcurrentHashMap<String, List<String>> msgPerSecondByType = new ConcurrentHashMap<>();
    private ConcurrentHashMap<String, String> averageThroughputByType = new ConcurrentHashMap<>();
    private ConcurrentHashMap<String, String> totalThroughputByType = new ConcurrentHashMap<>();
    private ConcurrentHashMap<String, List<Long>> latenciesByType = new ConcurrentHashMap<>();
    private ConcurrentHashMap<String, String> averageLatencyByType = new ConcurrentHashMap<>();
    private ConcurrentHashMap<String, AtomicLong> totalMessagesByType = new ConcurrentHashMap<>();
    private ConcurrentHashMap<String, Lock> typeLocks = new ConcurrentHashMap<>();

    private long startTime = System.currentTimeMillis();

    public PerformanceUtility() {
        // Initialize message types
        String[] messageTypes = {"type1", "type2", "type3", "type4"};
        for (String type : messageTypes) {
            msgPerSecondByType.put(type, new ArrayList<>());
            latenciesByType.put(type, new ArrayList<>());
            totalMessagesByType.put(type, new AtomicLong(0));
            typeLocks.put(type, new ReentrantLock());
        }
    }

    public void recordMessage(long latency, String messageType) {
        AtomicLong counter = totalMessagesByType.get(messageType);
        counter.incrementAndGet();

        Lock lock = typeLocks.get(messageType);
        lock.lock();

        try {
            // Record latency
            List<Long> latencies = latenciesByType.get(messageType);
            latencies.add(latency);
            averageLatencyByType.put(messageType, String.valueOf(latencies.stream().mapToLong(Long::longValue).average().orElse(0.0)));

            long elapsedSeconds = (System.currentTimeMillis() - startTime) / 1000;
            if (elapsedSeconds == 0) {
                elapsedSeconds = 1;  // To prevent divide by zero
            }

            List<String> messagesPerSecondList = msgPerSecondByType.get(messageType);
            long currentMsgPerSecond = counter.get() / elapsedSeconds;
            messagesPerSecondList.add(String.valueOf(currentMsgPerSecond));

            long average = counter.get() / (long) messagesPerSecondList.size();
            averageThroughputByType.put(messageType, String.valueOf(average));

            totalThroughputByType.put(messageType, String.valueOf(counter.get()));
        } finally {
            lock.unlock();
        }
    }

    public List<String> getMsgPerSecond(String messageType) {
        return msgPerSecondByType.getOrDefault(messageType, new ArrayList<>());
    }

    public String getAverageThroughput(String messageType) {
        return averageThroughputByType.get(messageType);
    }

    public String getTotalThroughput(String messageType) {
        return totalThroughputByType.get(messageType);
    }

    public String getAverageLatency(String messageType) {
        return averageLatencyByType.get(messageType);
    }
}

////////////////////////////////////


import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class PerformanceUtilityTest {

    private PerformanceUtility performanceUtility;

    @Before
    public void setup() {
        performanceUtility = new PerformanceUtility();
    }

    @Test
    public void testTotalThroughputByType() {
        performanceUtility.recordMessage(50, "type1");
        assertEquals("1", performanceUtility.getTotalThroughput("type1"));

        performanceUtility.recordMessage(60, "type1");
        assertEquals("2", performanceUtility.getTotalThroughput("type1"));
    }

    @Test
    public void testAverageLatency() {
        performanceUtility.recordMessage(50, "type1");
        assertEquals("50.0", performanceUtility.getAverageLatency("type1"));

        performanceUtility.recordMessage(150, "type1");
        assertTrue(Double.parseDouble(performanceUtility.getAverageLatency("type1")) >= 50.0);
    }

    @Test
    public void testThreadSafety() throws InterruptedException {
        int numberOfThreads = 10;
        int messagesPerThread = 1000;
        ExecutorService executor = Executors.newFixedThreadPool(numberOfThreads);

        for (int i = 0; i < numberOfThreads; i++) {
            executor.execute(() -> {
                for (int j = 0; j < messagesPerThread; j++) {
                    performanceUtility.recordMessage(50, "type1");
                    performanceUtility.recordMessage(60, "type2");
                    performanceUtility.recordMessage(70, "type3");
                    performanceUtility.recordMessage(80, "type4");
                }
            });
        }

        executor.shutdown();
        executor.awaitTermination(10, TimeUnit.SECONDS);

        assertEquals(String.valueOf(numberOfThreads * messagesPerThread), performanceUtility.getTotalThroughput("type1"));
        assertEquals(String.valueOf(numberOfThreads * messagesPerThread), performanceUtility.getTotalThroughput("type2"));
        assertEquals(String.valueOf(numberOfThreads * messagesPerThread), performanceUtility.getTotalThroughput("type3"));
        assertEquals(String.valueOf(numberOfThreads * messagesPerThread), performanceUtility.getTotalThroughput("type4"));
    }

    @Test
    public void testMsgPerSecondByType() throws InterruptedException {
        performanceUtility.recordMessage(50, "type1");
        // Assuming it's executed immediately, the msg per second should be at least 1
        List<String> messagesPerSecond = performanceUtility.getMsgPerSecond("type1");
        assertTrue(messagesPerSecond.size() > 0 && Integer.parseInt(messagesPerSecond.get(0)) >= 1);
    }
}




