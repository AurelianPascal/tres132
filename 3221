Define Java Classes for CSV Structures

1. TableConfig Class for CFG_TABLE_CONFIG
java
Copy code
public class TableConfig {
    private String linguamajor;
    private String tablename;
    private String schemaowner;
    private String hashhist;
    private String triggertable;
    private int lockseq;
    private String tabletype;

    // Getters and setters
}
2. MessageMap Class for CFG_MESSAGE_MAP
java
Copy code
public class MessageMap {
    private String messagetype;
    private String assetclass;
    private String linguamajor;
    private String updatemode;

    // Getters and setters
}
3. LinguaMap Class for CFG_LINGUA_MAP
This class will contain nested classes for each section within the CFG_LINGUA_MAP.

java
Copy code
public class LinguaMap {
    private List<Variable> variables;
    private List<MapAsMajor> mapAsMajors;
    private List<ManualyMapped> manualyMappeds;

    // Nested classes for Variable, MapAsMajor, ManualyMapped
    // Getters and setters
}

public class Variable {
    private String linguamajor;
    private String linguaminor;
    private String linguafield;
    private String databasetype;
    private String variable;

    // Getters and setters
}

public class MapAsMajor {
    private String linguamajor;
    private String linguaminor;
    private String jsonnamespace;

    // Getters and setters
}

public class ManualyMapped {
    private String hierarchytype;
    private String tabletype;
    private String linguamajor;
    private String linguaminor;
    private String linguafield;
    private String tablename;
    private String tablecolumn;
    private String databasetype;
    private String variable;

    // Getters and setters
}

import com.opencsv.bean.CsvToBeanBuilder;
import org.springframework.stereotype.Service;
import java.io.FileReader;
import java.util.List;

@Service
public class CsvService {

    public List<TableConfig> readTableConfigCsv(String filePath) {
        try (FileReader reader = new FileReader(filePath)) {
            return new CsvToBeanBuilder<TableConfig>(reader)
                    .withType(TableConfig.class)
                    .build()
                    .parse();
        } catch (Exception e) {
            // Handle exceptions
            e.printStackTrace();
            return null;
        }
    }

    public List<MessageMap> readMessageMapCsv(String filePath) {
        try (FileReader reader = new FileReader(filePath)) {
            return new CsvToBeanBuilder<MessageMap>(reader)
                    .withType(MessageMap.class)
                    .build()
                    .parse();
        } catch (Exception e) {
            // Handle exceptions
            e.printStackTrace();
            return null;
        }
    }

    public LinguaMap readLinguaMapCsv(String variablesFilePath, String mapAsMajorFilePath, String manualyMappedFilePath) {
        LinguaMap linguaMap = new LinguaMap();
        try {
            linguaMap.setVariables(readVariablesCsv(variablesFilePath));
            linguaMap.setMapAsMajors(readMapAsMajorCsv(mapAsMajorFilePath));
            linguaMap.setManualyMappeds(readManualyMappedCsv(manualyMappedFilePath));
        } catch (Exception e) {
            // Handle exceptions
            e.printStackTrace();
        }
        return linguaMap;
    }

    private List<Variable> readVariablesCsv(String filePath) {
        try (FileReader reader = new FileReader(filePath)) {
            return new CsvToBeanBuilder<Variable>(reader)
                    .withType(Variable.class)
                    .build()
                    .parse();
        } catch (Exception e) {
            // Handle exceptions
            e.printStackTrace();
            return null;
        }
    }

    private List<MapAsMajor> readMapAsMajorCsv(String filePath) {
        try (FileReader reader = new FileReader(filePath)) {
            return new CsvToBeanBuilder<MapAsMajor>(reader)
                    .withType(MapAsMajor.class)
                    .build()
                    .parse();
        } catch (Exception e) {
            // Handle exceptions
            e.printStackTrace();
            return null;
        }
    }

    private List<ManualyMapped> readManualyMappedCsv(String filePath) {
        try (FileReader reader = new FileReader(filePath)) {
            return new CsvToBeanBuilder<ManualyMapped>(reader)
                    .withType(ManualyMapped.class)
                    .build()
                    .parse();
        } catch (Exception e) {
            // Handle exceptions
            e.printStackTrace();
            return null;
        }
    }
}

import com.opencsv.bean.CsvToBeanBuilder;
import org.springframework.stereotype.Service;
import java.io.FileReader;
import java.util.List;

@Service
public class CsvService {

    public List<TableConfig> readTableConfigCsv(String filePath) {
        try (FileReader reader = new FileReader(filePath)) {
            return new CsvToBeanBuilder<TableConfig>(reader)
                    .withType(TableConfig.class)
                    .build()
                    .parse();
        } catch (Exception e) {
            // Handle exceptions
            e.printStackTrace();
            return null;
        }
    }

    public List<MessageMap> readMessageMapCsv(String filePath) {
        try (FileReader reader = new FileReader(filePath)) {
            return new CsvToBeanBuilder<MessageMap>(reader)
                    .withType(MessageMap.class)
                    .build()
                    .parse();
        } catch (Exception e) {
            // Handle exceptions
            e.printStackTrace();
            return null;
        }
    }

    public LinguaMap readLinguaMapCsv(String variablesFilePath, String mapAsMajorFilePath, String manualyMappedFilePath) {
        LinguaMap linguaMap = new LinguaMap();
        try {
            linguaMap.setVariables(readVariablesCsv(variablesFilePath));
            linguaMap.setMapAsMajors(readMapAsMajorCsv(mapAsMajorFilePath));
            linguaMap.setManualyMappeds(readManualyMappedCsv(manualyMappedFilePath));
        } catch (Exception e) {
            // Handle exceptions
            e.printStackTrace();
        }
        return linguaMap;
    }

    private List<Variable> readVariablesCsv(String filePath) {
        try (FileReader reader = new FileReader(filePath)) {
            return new CsvToBeanBuilder<Variable>(reader)
                    .withType(Variable.class)
                    .build()
                    .parse();
        } catch (Exception e) {
            // Handle exceptions
            e.printStackTrace();
            return null;
        }
    }

    private List<MapAsMajor> readMapAsMajorCsv(String filePath) {
        try (FileReader reader = new FileReader(filePath)) {
            return new CsvToBeanBuilder<MapAsMajor>(reader)
                    .withType(MapAsMajor.class)
                    .build()
                    .parse();
        } catch (Exception e) {
            // Handle exceptions
            e.printStackTrace();
            return null;
        }
    }

    private List<ManualyMapped> readManualyMappedCsv(String filePath) {
        try (FileReader reader = new FileReader(filePath)) {
            return new CsvToBeanBuilder<ManualyMapped>(reader)
                    .withType(ManualyMapped.class)
                    .build()
                    .parse();
        } catch (Exception e) {
            // Handle exceptions
            e.printStackTrace();
            return null;
        }
    }
}

2. Read CSV Files
You can use OpenCSV or a similar library to read the CSV files and map them to the above Java objects.

3. Convert Java Objects to YAML
Using SnakeYAML, convert the Java objects to YAML. Here's a simple way to do it:

java
Copy code
public String toYaml(Object data) {
    Yaml yaml = new Yaml();
    return yaml.dumpAsMap(data);
}
4. Spring Boot Controller to Handle the Conversion
java
Copy code
@RestController
public class CsvToYamlController {

    @Autowired
    private CsvService csvService;  // Service to read CSV and convert to Java Objects

    @GetMapping("/convert")
    public String convertCsvToYaml() {
        List<TableConfig> tableConfigs = csvService.readTableConfigCsv();
        List<MessageMap> messageMaps = csvService.readMessageMapCsv();
        LinguaMap linguaMap = csvService.readLinguaMapCsv();

        // Now, convert these objects to YAML
        Yaml yaml = new Yaml();
        Map<String, Object> yamlMap = new LinkedHashMap<>();
        yamlMap.put("CFG_TABLE_CONFIG", tableConfigs);
        yamlMap.put("CFG_MESSAGE_MAP", messageMaps);
        yamlMap.put("CFG_LINGUA_MAP", linguaMap);

        return yaml.dump(yamlMap);
    }
}

/////////////

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.Constructor;
import com.opencsv.bean.StatefulBeanToCsv;
import com.opencsv.bean.StatefulBeanToCsvBuilder;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.Writer;
import java.util.Map;

@RestController
public class YamlToCsvController {

    @GetMapping("/convertYamlToCsv")
    public String convertYamlToCsv() {
        try {
            // Step 1: Read the YAML file
            Yaml yaml = new Yaml(new Constructor(Map.class));
            Map<String, Object> yamlData = yaml.load(new FileReader("path/to/your/yamlFile.yaml"));

            // Extract data for each CSV
            List<TableConfig> tableConfigs = (List<TableConfig>) yamlData.get("CFG_TABLE_CONFIG");
            List<MessageMap> messageMaps = (List<MessageMap>) yamlData.get("CFG_MESSAGE_MAP");
            LinguaMap linguaMap = (LinguaMap) yamlData.get("CFG_LINGUA_MAP");

            // Step 2: Write data to CSV files
            writeCsv("path/to/tableConfig.csv", tableConfigs);
            writeCsv("path/to/messageMap.csv", messageMaps);
            writeCsv("path/to/variables.csv", linguaMap.getVariables());
            writeCsv("path/to/mapAsMajor.csv", linguaMap.getMapAsMajors());
            writeCsv("path/to/manualyMapped.csv", linguaMap.getManualyMappeds());

            return "YAML to CSV conversion successful!";
        } catch (Exception e) {
            e.printStackTrace();
            return "Error during conversion: " + e.getMessage();
        }
    }

    private <T> void writeCsv(String filePath, List<T> data) {
        try (Writer writer = new FileWriter(filePath)) {
            StatefulBeanToCsv<T> beanToCsv = new StatefulBeanToCsvBuilder<T>(writer).build();
            beanToCsv.write(data);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
.////
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.Constructor;
import com.opencsv.CSVWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.List;

@RestController
public class YamlToCsvController {

    @GetMapping("/convertYamlToCsv")
    public String convertYamlToCsv() {
        try {
            // Step 1: Read the YAML file
            Yaml yaml = new Yaml(new Constructor(YamlStructure.class));
            YamlStructure yamlData = yaml.load(new FileReader("path/to/your/yamlFile.yaml"));

            // Process and write each mapping table to a CSV file
            for (MappingTable mappingTable : yamlData.getMappingTables()) {
                writeCsv(mappingTable.getMappingTable() + ".csv", mappingTable.getColumnNames(), mappingTable.getRows());
            }

            // Process and write each section of LinguaMap to a CSV file
            for (Section section : yamlData.getLinguaMapSection().getSection()) {
                writeCsv(section.getSectionName() + ".csv", section.getColumnNames(), section.getRows());
            }

            return "YAML to CSV conversion successful!";
        } catch (Exception e) {
            e.printStackTrace();
            return "Error during conversion: " + e.getMessage();
        }
    }

    private void writeCsv(String fileName, String columnNames, List<String> rows) {
        try (CSVWriter writer = new CSVWriter(new FileWriter("path/to/output/" + fileName))) {
            writer.writeNext(columnNames.split(","));
            for (String row : rows) {
                writer.writeNext(row.split(","));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}///
public class MappingTable {
    private String mappingTable;
    private String columnNames;
    private List<String> rows;

    // Getters and Setters
}

public class Section {
    private String sectionName;
    private String columnNames;
    private List<String> rows;

    // Getters and Setters
}

public class LinguaMapSection {
    private List<Section> section;

    // Getters and Setters
}

public class YamlStructure {
    private List<MappingTable> mappingTables;
    private LinguaMapSection linguaMapSection;

    // Getters and Setters
}
